{"version":3,"file":"static/js/931.050887f1.chunk.js","mappings":"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","sources":["components/ListItem.js","components/TimeSelectionBar.js","components/Swiper.js","components/View.js"],"sourcesContent":["import React, { useState, useImperativeHandle, lazy, Suspense } from 'react'\r\nimport Loader from './Loader'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faAngleDown, faAngleUp  } from '@fortawesome/free-solid-svg-icons'\r\nimport { calculateAverage, sortByTime } from '../util/helpers'\r\nimport { useLanguage } from '../hooks/useLanguage'\r\nconst Entry = lazy(() => import('./Entry'))\r\n\r\n// A single data entry for List component\r\nconst ListItem = React.forwardRef((props, ref) => {\r\n  const [expanded, setExpanded] = useState(false)\r\n  const texts = useLanguage()\r\n  const [date, entries] = props.day\r\n  const [monthNum, dayNum, year] = date.split('/')\r\n  const expand = (value = null) => {    \r\n    setExpanded(value === null ? !expanded : value)\r\n  }\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return { expand }\r\n  })\r\n\r\n  // Sorting individual readings by time stamps and creating Entry components.\r\n  const createEntries = () =>\r\n    [...entries.readings]\r\n      .sort(sortByTime)\r\n      .map(entry => <Entry key={entry.id} content={entry} texts={texts}/>)\r\n  \r\n  const dayAverage = calculateAverage(entries.readings)\r\n  \r\n  return (\r\n    <>    \r\n      <div className='list-item' onClick={() => {\r\n        props.toggleExpanded(`${date}-list`)}}>\r\n        \r\n        <div className='item-field-bp-cont outer'>          \r\n          <div className='item-field-bp-cont'>\r\n            <div className='item-field-bp'>\r\n              <div className='item-bp'>{dayNum}</div>\r\n              <div className='guide-text'>{`${monthNum}/${year}`}</div>\r\n            </div>      \r\n            \r\n            <div className='item-field-bp'>\r\n              <div className='guide-text'>{texts.view.listItem.sys}</div>\r\n              <div className='item-bp sys'>{dayAverage.systolic}</div>\r\n              <div className='guide-text'>mmHg</div>\r\n            </div>\r\n\r\n            <div className='item-field-bp'>\r\n              <div className='guide-text'>{texts.view.listItem.dia}</div>\r\n              <div className='item-bp dia'> {dayAverage.diastolic}</div>\r\n              <div className='guide-text'>mmHg</div>\r\n            </div>\r\n\r\n            <div className='item-field-bp'>\r\n              <div className='guide-text'>{texts.view.listItem.pul}</div>\r\n              <div className='item-bp pul'>{dayAverage.pulse}</div>\r\n              <div className='guide-text'>bpm</div>\r\n            </div>          \r\n          </div>\r\n          <div className='item-field-bp'>\r\n            {expanded ? \r\n              <div className='item-bp'>\r\n                <span className='list-guide-text'>{texts.view.listItem.showLess}</span>\r\n                <FontAwesomeIcon icon={faAngleUp} />\r\n              </div> :\r\n              <div className='item-bp'>\r\n                <span className='list-guide-text'>{texts.view.listItem.showMore}</span>\r\n                <FontAwesomeIcon icon={faAngleDown} />\r\n              </div>\r\n            }\r\n          </div>          \r\n        </div>\r\n        {expanded ?\r\n          <div className='item-cont-expanded'>            \r\n            <div className='guide-text'>{texts.view.listItem.entry.entries}</div>\r\n            <div>\r\n              <Suspense fallback={<Loader />}>\r\n                {createEntries()}\r\n              </Suspense>\r\n            </div>            \r\n          </div> : null\r\n        }      \r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nListItem.displayName = 'ListItem'\r\n\r\nexport default ListItem","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setMonth, initialize } from '../reducers/viewReducer'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faAngleLeft, faAngleRight, faAngleDown  } from '@fortawesome/free-solid-svg-icons'\r\nimport { getMonthName } from '../util/helpers'\r\n\r\nconst TimeSelectionBar = ({ selectedMonth }) => {\r\n  const dispatch = useDispatch()\r\n  // Defining the first and the last month containing entries to determine if prev. and next. arrows are shown.\r\n  const [monthObjectKeys, firstEntryMonth, lastEntryMonth, lan] = useSelector(({ view, data, lan }) => {    \r\n    // Setting time selection to current month if the month currently in view.month is deleted. Aiheutti kaatumisen uudessa systeemissä, joten kommentoitu.\r\n    // if (!data.entries[view.month]) dispatch(initialize())\r\n    if (!data || Object.keys(data) === 0) return null\r\n    const keys = Object.keys(data.entries)\r\n    return [keys, keys[0], keys[keys.length - 1], lan]\r\n  })\r\n  /* Moving to previous or next month. Finds the index of currently selected month\r\n     in monthObjectKeys array. The index is used in dispatches to select the next or previous month: \r\n     if previous is chosen, decrease index by one to select the preceding index in monthObjectKeys.\r\n  */ \r\n  const handleIconClick = (event) => {\r\n    const iconName = event.target.firstChild.dataset.icon\r\n    const index = monthObjectKeys.findIndex((key) => {\r\n      return key === selectedMonth\r\n    })\r\n    \r\n    if (iconName === 'angle-left') dispatch(setMonth(monthObjectKeys[index - 1]))\r\n    if (iconName === 'angle-right') dispatch(setMonth(monthObjectKeys[index + 1]))\r\n    \r\n  }\r\n\r\n  // Test options for Select component\r\n  const options = () => {\r\n    return monthObjectKeys.map(mok =>\r\n      <option key={mok} value={mok}>\r\n        {getMonthName(mok, lan)}\r\n      </option>\r\n    )    \r\n  }\r\n\r\n  if (!monthObjectKeys.includes(selectedMonth)) return null\r\n\r\n  // Showing prev and next arrows if the first or last month of the list isn't selected\r\n  return (\r\n    <div className='view-option-bar' id='time-selection-bar'>\r\n      <div>\r\n        {selectedMonth.toString() !== firstEntryMonth &&\r\n        <div className='icon-div' onClick={handleIconClick}>\r\n          <FontAwesomeIcon className='icon' icon={faAngleLeft} />\r\n        </div>\r\n        }\r\n      </div>\r\n      <select\r\n        value={selectedMonth}\r\n        className='view-option month'\r\n        onChange={({ target }) => {\r\n          dispatch(setMonth(target.value))\r\n        }}\r\n      >\r\n        {options()}\r\n      </select>\r\n      <div>\r\n        {selectedMonth.toString() !== lastEntryMonth &&\r\n        <div className='icon-div' onClick={handleIconClick}>\r\n          <FontAwesomeIcon className='icon' icon={faAngleRight} />\r\n        </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimeSelectionBar","import React, { useState, useEffect, useCallback, useRef, lazy, Suspense } from 'react'\r\nimport ListItem from './ListItem'\r\nimport TimeSelectionBar from './TimeSelectionBar'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux'\r\nimport { setMonth } from '../reducers/viewReducer'\r\nimport { sortByDayNumber } from '../util/helpers'\r\nimport { useLanguage } from '../hooks/useLanguage'\r\nimport 'swiper/css'\r\nconst Chart = lazy(() => import('./Chart'))\r\n\r\n// Constructs an array of ListItems to be placed into a 'data-container' in View component\r\nconst SwiperView = ({ viewType }) => {\r\n  const [slidesList, setSlidesList] = useState(null)\r\n  const [slidesChart, setSlidesChart] = useState(null)\r\n  const [swiper, setSwiper] = useState(null)\r\n  const [data, selectedMonth, timePeriod, user, lan] = useSelector(state => [state.data, state.view.month, state.view.timePeriod, state.login, state.lan], shallowEqual)\r\n  const values = Object.entries(data.entries)\r\n  const [initialSlide] = useState(() => values.findIndex((m) => m[0] === selectedMonth))\r\n  const dispatch = useDispatch()\r\n  const texts = useLanguage()\r\n  const listItemsRef = useRef()\r\n  const chartsRef = useRef()\r\n  // Creating slides for swiper. Detects changes by watching values stored in component state.\r\n  // Tätä voisi tehostaa luomalla vain edellisestä valuesista poikkeavista kuukausista slidet. Nyt tehdään aina koko pakasta.\r\n  useEffect(() => {\r\n    listItemsRef.current = []\r\n    chartsRef.current = []\r\n    // If all values are deleted, slides are also discarded.\r\n    if (values.length < 1) {\r\n      setSlidesList(null)\r\n      setSlidesChart(null)\r\n      return\r\n    }\r\n    if (viewType === 'list') {\r\n      return setSlidesList(values.map(m => {\r\n        return createSlide(m)\r\n      }))\r\n    }\r\n    setSlidesChart(values.map(m => {\r\n      // Creating chart slide only if iterated month contains entries at least for 2 days.\r\n      if (Object.keys(m[1]).length > 1) return createSlide(m)\r\n    }))\r\n  }, [data, viewType, timePeriod])\r\n  \r\n  useEffect(() => {    \r\n    if (swiper) {\r\n      const selectedMonthIndex = values.findIndex((m) => m[0] === selectedMonth)      \r\n      if (selectedMonthIndex >= 0) swiper.activeIndex = selectedMonthIndex\r\n      swiper.update()\r\n    }\r\n  }, [slidesList, slidesChart, selectedMonth])\r\n  \r\n  // A function to control expanded views. Each ListItem (created in createSlide) is saved in \r\n  // in reference listItemRef, through which toggleExpanded has an access to expand() methods \r\n  // in ListItems. Method toggleExpanded is sent to ListItems as a prop.\r\n  const toggleExpanded = useCallback((itemKey) => {    \r\n    for (let key in listItemsRef.current) {\r\n      if (listItemsRef.current[key] === null) continue\r\n      key === itemKey\r\n        ? listItemsRef.current[key].expand()\r\n        : listItemsRef.current[key].expand(false)\r\n    }\r\n  }, [])\r\n\r\n  // Tätä pitäis optimoida niin, että entisiin lisätään vain uudet slidet. Ehkä slides-muuttujat\r\n  const createSlide = useCallback((month) => {\r\n    const [monthObjectKey, days] = month\r\n    // Creating entry array from month data, which is sorted by day number and shortened according to currently\r\n    // selected time period (day, week, month).\r\n    const daysArr = Object.entries(days).sort(sortByDayNumber).slice(0, timePeriod)\r\n    \r\n    return (\r\n      <SwiperSlide key={`${monthObjectKey}-${viewType}-slide`} data-month-object-key={monthObjectKey}>\r\n        {viewType === 'list'\r\n          ? daysArr.map(day => {\r\n            const key = `${day[0]}-${viewType}`\r\n            return <ListItem ref={(elem) => listItemsRef.current[key] = elem} key={key} day={day} toggleExpanded={toggleExpanded}/>\r\n          }) :\r\n          <Suspense>\r\n            <Chart \r\n              ref={(elem) => chartsRef.current[`${month[0]}-${viewType}`] = elem}\r\n              key={`${monthObjectKey}-${viewType}`}\r\n              month={daysArr}\r\n            />\r\n          </Suspense>\r\n        }\r\n      </SwiperSlide>\r\n    )    \r\n  }, [viewType, timePeriod])\r\n  \r\n  if (!slidesList && !slidesChart || !values) return null\r\n\r\n  // Loading PDF file asynchronously. Function pdf creates a blob of given content, which is saved by file-saver.\r\n  const downloadPdf = async () => {\r\n    // Sorting day objects inside a month by date\r\n    const sortForPdf = () =>\r\n      Object.entries(values.find(obj => obj[0] === selectedMonth)[1]).sort(sortByDayNumber)\r\n\r\n    const PDFDoc = (await import('./PDFDoc')).default\r\n    const { pdf } = (await import('@react-pdf/renderer')).default\r\n    const blob = await pdf((\r\n      <PDFDoc \r\n        contents={sortForPdf()}\r\n        chartImg={(viewType === 'chart') && chartsRef.current[`${selectedMonth}-chart`].toImage()}\r\n        user={user}\r\n        monthObjectKey={selectedMonth}\r\n        lan={lan}\r\n        texts={texts}\r\n      />\r\n    )).toBlob()    \r\n    const { saveAs } = (await import('file-saver')).default\r\n    saveAs(blob, `${selectedMonth}-${viewType}`)\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <TimeSelectionBar selectedMonth={selectedMonth}/>\r\n      <button className='pdf-btn' onClick={downloadPdf}>{texts.view.pdf.btn}</button>    \r\n      <Swiper\r\n        className='list-item-wrapper'\r\n        spaceBetween={100}\r\n        autoHeight={false}\r\n        onSlideChange={(swiper) => {\r\n          const month = swiper.slides[swiper.activeIndex]?.dataset.monthObjectKey\r\n          dispatch(setMonth(month))\r\n        }}\r\n        onSwiper={setSwiper}\r\n        initialSlide={initialSlide}\r\n        observer={true}\r\n      >\r\n        { viewType === 'list' ? slidesList : slidesChart }\r\n      </Swiper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SwiperView","import React, { useState, useContext, useMemo, useEffect } from 'react'\r\nimport { ModalContext } from '../App'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux'\r\nimport { selectTimePeriod } from '../reducers/viewReducer'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { useLanguage } from '../hooks/useLanguage'\r\nimport { faChartLine, faList, faPlus, faHome } from '@fortawesome/free-solid-svg-icons'\r\nimport SwiperView from './Swiper'\r\n\r\nconst ViewOptions = ({ timePeriod, texts }) => {\r\n  // Adding and removing class 'selected' according to view-option clicks.\r\n  const views = useMemo(() => document.getElementsByClassName('view-option'), [])\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    for (let view of views) {\r\n      if (view.id === timePeriod.toString()) view.classList.add('selected')\r\n      else (view.classList.remove('selected'))\r\n    }\r\n  }, [timePeriod])  \r\n\r\n  return (\r\n    <>\r\n      <div className='view-option-bar'>\r\n        <div id='1' className='view-option' onClick={() => dispatch(selectTimePeriod('day'))}>{texts.view.viewOptions.day}</div>\r\n        <div id='7' className='view-option' onClick={() => dispatch(selectTimePeriod('week'))}>{texts.view.viewOptions.week}</div>\r\n        <div id='31' className='view-option' onClick={() => dispatch(selectTimePeriod('month'))}>{texts.view.viewOptions.month}</div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst View = () => {\r\n  const [openModal] = useContext(ModalContext)\r\n  const [view, setView] = useState('list')\r\n  const [rawData, timePeriod, selectedMonth, user] = useSelector(state => [state.data, state.view.timePeriod, state.view.month, state.login], shallowEqual)\r\n  const data = Object.entries(rawData.entries)\r\n  const swiperView = useMemo(() => <SwiperView viewType={view}/>, [view] )\r\n  const texts = useLanguage()\r\n  const navigate = useNavigate()\r\n  \r\n  // If selected month has less than 2 days with entries, line chart can't be selected as view type.\r\n  const enableChart = useMemo(() => {\r\n    const month = data.find(m => m[0] === selectedMonth)\r\n    \r\n    return selectedMonth && (month !== undefined)\r\n      ? Object.keys(month[1]).length > 1\r\n      : false\r\n  }, [selectedMonth, rawData])\r\n\r\n  // If there's no data, user is redirected to main view. Effect is used to prevent simultaneous rendering of two components.\r\n  useEffect(() => {\r\n    if (data.length < 1) navigate('/')\r\n  }, [rawData])\r\n\r\n  return (\r\n    <div>\r\n      {(user && data.length > 0) &&\r\n        <>\r\n          <div className='data-container'>        \r\n            <ViewOptions timePeriod={timePeriod} texts={texts}/>\r\n            {swiperView}\r\n            <div className='icon-bar'>\r\n              <div className='icon-div' onClick={() => navigate('/')}>\r\n                <FontAwesomeIcon className='icon' icon={faHome} />\r\n                <div className='icon-text'>{texts.view.iconBar.home}</div>\r\n              </div>\r\n              <div data-form-type='createRecord' className='icon-div' onClick={(e) => openModal(e)}>\r\n                <FontAwesomeIcon className='icon' icon={faPlus} />\r\n                <div className='icon-text'>{texts.view.iconBar.new}</div>\r\n              </div>\r\n              <div className='icon-div' onClick={() => setView('list')}>\r\n                <FontAwesomeIcon className='icon' icon={faList} />\r\n                <div className='icon-text'>{texts.view.iconBar.list}</div>\r\n              </div>\r\n              {enableChart && <div className='icon-div' onClick={() => setView('chart')}>\r\n                <FontAwesomeIcon className='icon' icon={faChartLine} />\r\n                <div className='icon-text'>{texts.view.iconBar.chart}</div>\r\n              </div>}\r\n            </div>          \r\n          </div>\r\n          <div id='bottom-block'></div>\r\n        </>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default View"],"names":["Entry","lazy","ListItem","React","props","ref","expanded","setExpanded","useState","texts","useLanguage","date","entries","day","monthNum","dayNum","year","split","expand","value","useImperativeHandle","dayAverage","calculateAverage","readings","className","onClick","toggleExpanded","view","listItem","sys","systolic","dia","diastolic","pul","pulse","showLess","icon","faAngleUp","showMore","faAngleDown","entry","Suspense","fallback","Loader","sort","sortByTime","map","content","id","displayName","selectedMonth","dispatch","useDispatch","monthObjectKeys","firstEntryMonth","lastEntryMonth","lan","useSelector","data","Object","keys","length","handleIconClick","event","iconName","target","firstChild","dataset","index","findIndex","key","setMonth","includes","toString","faAngleLeft","onChange","mok","getMonthName","faAngleRight","Chart","viewType","slidesList","setSlidesList","slidesChart","setSlidesChart","swiper","setSwiper","timePeriod","user","state","month","login","shallowEqual","values","initialSlide","m","listItemsRef","useRef","chartsRef","useEffect","current","createSlide","selectedMonthIndex","activeIndex","update","useCallback","itemKey","monthObjectKey","days","daysArr","sortByDayNumber","slice","elem","async","PDFDoc","default","pdf","blob","contents","find","obj","chartImg","toImage","toBlob","saveAs","btn","spaceBetween","autoHeight","onSlideChange","slides","onSwiper","observer","ViewOptions","views","useMemo","document","getElementsByClassName","classList","add","remove","selectTimePeriod","viewOptions","week","openModal","useContext","ModalContext","setView","rawData","swiperView","Swiper","navigate","useNavigate","enableChart","undefined","faHome","iconBar","home","e","faPlus","new","faList","list","faChartLine","chart"],"sourceRoot":""}