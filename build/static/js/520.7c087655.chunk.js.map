{"version":3,"file":"static/js/520.7c087655.chunk.js","mappings":"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","sources":["components/Button.js","components/forms/UserSettingsForm.js","components/UserPage.js","components/forms/CreateAccountForm.js","components/forms/LoginForm.js","components/forms/NewRecordForm.js","hooks/useDialog.js","services/loginService.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Button = ({ text, type, onClick, className, style, disabled }) => {\r\n  return (\r\n    <button\r\n      type={type}\r\n      className={className}\r\n      onClick={onClick}\r\n      style={style}\r\n      disabled={disabled}\r\n    >{text}</button>\r\n  )\r\n}\r\n\r\nexport default Button","import React, { useState, useEffect } from 'react'\r\nimport Button from '../Button'\r\nimport Select from 'react-select'\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\r\nimport { useLanguage } from '../../hooks/useLanguage'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { updateLoggedUser } from '../../reducers/loginReducer'\r\nimport { useDialog } from '../../hooks/useDialog'\r\nimport userService from '../../services/userService'\r\nimport Loader from '../Loader'\r\n\r\n// Yhdistä tämä ja CreateAccountForm. Ehkä yhteisten toimintojen osalta custom-hook, jota molemmat komponentit käyttävät.\r\n// Kun sivu päivitetään /view-osoitteessa, serverillä kutsutaan tietokannasta findOnea, ja serveri kaatuu.\r\n// Git-apuja: https://devconnected.com/how-to-set-upstream-branch-on-git/\r\n\r\nconst UserSettings = ({ user }) => {\r\n  const [loading, setLoading] = useState(true)\r\n  const [initialValues, setInitialValues] = useState({})\r\n  const { showDialog } = useDialog()\r\n  const navigate = useNavigate()\r\n  const dispatch = useDispatch()\r\n  const texts = useLanguage()\r\n  \r\n  useEffect(() => {\r\n    userService.getOne(user.id)\r\n      .then(user => {\r\n        user.height = user.height ? user.height : ''\r\n        user.weight = user.weight ? user.weight : ''\r\n        user.medInput = ''\r\n        setInitialValues(user)\r\n        setLoading(false)\r\n      })\r\n      .catch(err => {\r\n        showDialog(err.response.data.error, 'message', 'error')\r\n        navigate(-1)\r\n      })\r\n  }, [])\r\n  \r\n  const optionsBirthYear = () => {\r\n    const options = []\r\n    options.push(<option label={texts.forms.settings.birthSelect} key='default' ></option>)\r\n    const yearNow = new Date().getFullYear()\r\n\r\n    for (let i = yearNow; i >= 1900; i--) {\r\n      options.push(<option value={i} key={i}>{i}</option>)\r\n    }\r\n    return options\r\n  }\r\n  \r\n  const addMedicine = (props) => {\r\n    const medName = props.values.medInput\r\n      .substring(0, 1)\r\n      .toUpperCase()\r\n      .concat(props.values.medInput.substring(1))\r\n\r\n    if (props.values.medInput !== '') {\r\n      props.setFieldValue('medList', [...props.values.medList, medName])\r\n      props.setFieldValue('medInput', '')      \r\n    }     \r\n  }\r\n\r\n  const onSubmit = async values => {\r\n    try {\r\n      const updatedUser = await userService.update(values)\r\n      dispatch(updateLoggedUser(updatedUser))\r\n      showDialog(texts.forms.settings.notification, 'message')\r\n      navigate(-1)\r\n    } catch (exception) {\r\n      console.log('expection in UserPage', exception)\r\n    }\r\n  }\r\n  \r\n  if (loading) return <Loader />\r\n\r\n  return (\r\n    <div className='data-container'>\r\n      <Formik \r\n        initialValues={initialValues}\r\n        onSubmit={onSubmit}\r\n      >\r\n        {(props) => {\r\n          return (\r\n            <Form className='form'>\r\n              <div>\r\n                <label htmlFor='firstName'>{texts.forms.settings.first}</label>\r\n                <Field className='formField' type='text' id='firstName' name='firstName'/>\r\n                <ErrorMessage name='firstName' component='div' className='formik_error'/>\r\n              </div>\r\n              <div>\r\n                <label htmlFor='lastName'>{texts.forms.settings.last}</label>\r\n                <Field className='formField' type='text' id='lastName' name='lastName' />\r\n                <ErrorMessage name='lastName' component='div' className='formik_error'/>\r\n              </div>\r\n              <div>\r\n                <label htmlFor='birthYear'>{texts.forms.settings.birth}</label>\r\n                <Field className='formField' as='select' id='birthYear' name='birthYear'>\r\n                  {optionsBirthYear()}\r\n                </Field>\r\n                <ErrorMessage name='birthYear' component='div' className='formik_error'/>\r\n              </div>\r\n              <div>\r\n                <label htmlFor='height'>{texts.forms.settings.height}</label>\r\n                <Field className='formField' type='number' id='height' name='height' />\r\n              </div>\r\n              <div>\r\n                <label htmlFor='weight'>{texts.forms.settings.weight}</label>\r\n                <Field className='formField' type='number' id='weight' name='weight' />\r\n              </div>\r\n              <div>\r\n                <label htmlFor='medList'>{texts.forms.settings.medList}</label>\r\n                <Field\r\n                  placeholder={texts.forms.settings.medListPlaceholder}\r\n                  onKeyPress={e => {\r\n                    if (e.which === 13) {\r\n                      e.preventDefault()\r\n                      addMedicine(props)\r\n                    }\r\n                  }}\r\n                  name='medInput'\r\n                />\r\n                <Button\r\n                  style={{ marginLeft: '1em' }}\r\n                  className='util-btn'\r\n                  type='button'\r\n                  text={texts.forms.settings.add}\r\n                  disabled={props.values.medInput === '' ? true : false}\r\n                  onClick={() => addMedicine(props)}\r\n                />\r\n                <Field\r\n                  className='formField medSelect'\r\n                  placeholder={texts.forms.select.placeHolder}\r\n                  component={Select}\r\n                  name='medSelect'\r\n                  isMulti\r\n                  value={props.values.medList.map(med => { return { value: med, label: med } })}\r\n                  onChange={data => {\r\n                    if (window.confirm(texts.forms.settings.remConf)) {\r\n                      props.setFieldValue('medList', data.map(obj => obj.value))\r\n                    }\r\n                  }}\r\n                  onClick={({ target }) => {\r\n                    props.setFieldValue('medSelect', target.value)}\r\n                  }\r\n                />          \r\n              </div>\r\n              <div className='link-group'>\r\n                <Button text={texts.forms.settings.submit} type='submit' className='button'/>\r\n                <Button text={texts.forms.settings.cancel} type='button' onClick={() => navigate(-1)} className='button'/>  \r\n              </div>\r\n            </Form>\r\n          )}}     \r\n      </Formik>      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserSettings","import React from 'react'\r\nimport { UserSettingsForm } from './forms'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst UserPage = () => {\r\n  const [user] = useSelector(state => [state.login])\r\n  return (\r\n    <UserSettingsForm user={user}/>\r\n  )\r\n}\r\n\r\nexport default UserPage","import React, { useState } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight, faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\r\nimport { useLanguage } from '../../hooks/useLanguage'\r\nimport { useDispatch } from 'react-redux'\r\nimport { login } from '../../reducers/loginReducer'\r\nimport Select from 'react-select'\r\nimport Button from '../Button'\r\nimport userService from '../../services/userService'\r\nimport loginService from '../../services/loginService'\r\n\r\nconst CreateAccountForm = ({ closeModal }) => {\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [showNextPage, setShowNextPage] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const texts = useLanguage()\r\n\r\n  const initialValues = {\r\n    firstName: '',\r\n    lastName: '',\r\n    birthYear: '',\r\n    username: '',\r\n    password: '',\r\n    passwordConf: '',\r\n    medInput: '',\r\n    height: '',\r\n    weight: '',\r\n    medList: []\r\n  }\r\n\r\n  const onSubmit = async values => {\r\n    try {      \r\n      await userService.create(values)\r\n      const user = await loginService.login({ username: values.username, password: values.password })\r\n      dispatch(login(user))\r\n      setErrorMessage(null)\r\n      closeModal()\r\n    } catch (exception) {\r\n      setErrorMessage(\r\n        `${texts.forms.createAccount.err.nameTaken[0]}${values.username}${texts.forms.createAccount.err.nameTaken[1]}`)\r\n    }\r\n  }\r\n\r\n  // Error validation for Formik. All fields of the form are run through, and if empty, added to 'errors' object\r\n  const validate = values => {\r\n    const errors = {}\r\n    const notValidated = ['medList', 'medInput', 'medSelect', 'height', 'weight']\r\n    \r\n    for (let value in values) {\r\n      // !values[value] indicates an empty field. Checking this disables errors in real time.\r\n      if (!notValidated.includes(value) && !values[value]) errors[value] = texts.forms.err.empty\r\n    }\r\n\r\n    if (values.password !== '' && values.password.length < 6) {\r\n      errors.password = texts.forms.createAccount.err.pwdShort\r\n    }\r\n\r\n    if (values.password !== values.passwordConf) {\r\n      errors.passwordConf = texts.forms.createAccount.err.pwdConf\r\n    }\r\n    \r\n    return errors\r\n  }\r\n\r\n  const optionsBirthYear = () => {\r\n    const options = []\r\n    options.push(<option label={texts.forms.createAccount.birthSelect} key='default' ></option>)\r\n    const yearNow = new Date().getFullYear()\r\n\r\n    for (let i = yearNow; i >= 1900; i--) {\r\n      options.push(<option value={i} key={i}>{i}</option>)\r\n    }\r\n    return options\r\n  }\r\n\r\n  const addMedicine = (props) => {\r\n    if (props.values.medInput !== '') {\r\n      const medName = props.values.medInput\r\n        .substring(0, 1)\r\n        .toUpperCase()\r\n        .concat(props.values.medInput.substring(1))\r\n      props.setFieldValue('medList', [...props.values.medList, medName])\r\n      props.setFieldValue('medInput', '')\r\n    }     \r\n  }\r\n\r\n  // Styles for both parts of the form. When page changes, another set of fields is shown.\r\n  const first = { display: showNextPage ? 'none' : '' }\r\n  const second = { display: showNextPage ? '' : 'none' }\r\n\r\n  // To apply styles, component prop for ErrorMessage is needed\r\n  return (\r\n    <Formik \r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validate={validate}\r\n    >\r\n      {(props) =>\r\n        <Form className='form'>\r\n          <div style={first}>\r\n            <div>\r\n              <label htmlFor='firstName'>{texts.forms.createAccount.first}</label>\r\n              <Field className='formField' type='text' id='firstName' name='firstName' autoFocus/>\r\n              <ErrorMessage name='firstName' component='div' className='formik_error'/>\r\n            </div>\r\n            <div>\r\n              <label htmlFor='lastName'>{texts.forms.createAccount.last}</label>\r\n              <Field className='formField' type='text' id='lastName' name='lastName' />\r\n              <ErrorMessage name='lastName' component='div' className='formik_error'/>\r\n            </div>\r\n            <div>\r\n              <label htmlFor='birthYear'>{texts.forms.createAccount.birth}</label>\r\n              <Field className='formField' as='select' id='birthYear' name='birthYear'>\r\n                {optionsBirthYear()}\r\n              </Field>\r\n              <ErrorMessage name='birthYear' component='div' className='formik_error'/>\r\n            </div>\r\n            <div>\r\n              <label htmlFor='username'>{texts.forms.createAccount.user}</label>\r\n              <Field className='formField' type='text' id='username' name='username' />\r\n              <ErrorMessage name='username' component='div' className='formik_error'/>\r\n            </div>\r\n            <div>\r\n              <label htmlFor='password'>{texts.forms.createAccount.pwd}</label>\r\n              <Field className='formField' type='password' id='password' name='password' />\r\n              <ErrorMessage name='password' component='div' className='formik_error'/>\r\n            </div>\r\n            <div>\r\n              <label htmlFor='passwordConf'>{texts.forms.createAccount.pwdConf}</label>\r\n              <Field className='formField' type='password' id='passwordConf' name='passwordConf' />\r\n              <ErrorMessage name='passwordConf' component='div' className='formik_error'/>\r\n            </div>\r\n            <div className='flex-cont' style={{ padding: 0,  justifyContent: 'flex-end' }} onClick={() => {\r\n              // Validation executed when advancing to next page. Fields containing errors are manually \r\n              // set touched; otherwise Formik won't register the errors.\r\n              props.validateForm()\r\n                .then(errors => {\r\n                  const possibleErrors = Object.keys(errors) \r\n                  if (possibleErrors.length === 0) {\r\n                    setShowNextPage(!showNextPage)\r\n                  } else {\r\n                    console.log('touched: ', props.touched)\r\n                    props.setTouched({ /*...props.touched,*/ ...errors })\r\n                  }                  \r\n                })                              \r\n            }}><div className='icon-div'><FontAwesomeIcon icon={faArrowRight}/></div>\r\n            </div>\r\n          </div>\r\n          <div style={second}>            \r\n            <div className='flex-cont' style={{ padding: 0, justifyContent: 'flex-start' }} onClick={() => setShowNextPage(!showNextPage)}>\r\n              <div className='icon-div'><FontAwesomeIcon icon={faArrowLeft}/></div>\r\n            </div>\r\n            <div>\r\n              <label htmlFor='height'>{texts.forms.createAccount.height}</label>\r\n              <Field className='formField' type='number' id='height' name='height'/>\r\n            </div>\r\n            <div>\r\n              <label htmlFor='weight'>{texts.forms.createAccount.weight}</label>\r\n              <Field className='formField' type='number' id='weight' name='weight'/>\r\n            </div>\r\n            <div className='instruction'>\r\n              <p><i>{texts.forms.createAccount.instr}</i></p>              \r\n            </div>\r\n            <div>\r\n              <label htmlFor='medList'>{texts.forms.createAccount.medList}</label>\r\n              <Field\r\n                placeholder={texts.forms.createAccount.medListPlaceholder}\r\n                onKeyPress={e => {\r\n                  if (e.which === 13) {\r\n                    e.preventDefault()\r\n                    addMedicine(props)\r\n                  }\r\n                }}\r\n                name='medInput'\r\n              />\r\n              <Button\r\n                style={{ marginLeft: '1em',  }}\r\n                className='util-btn'\r\n                type='button'\r\n                text={texts.forms.createAccount.add}\r\n                disabled={props.values.medInput === '' ? true : false}\r\n                onClick={() => addMedicine(props)}\r\n              />\r\n              <Field\r\n                className='formField medSelect'\r\n                placeholder={texts.forms.select.placeHolder}\r\n                component={Select}\r\n                name='medSelect'\r\n                isMulti\r\n                value={props.values.medList.map(med => { return { value: med, label: med } })}\r\n                onChange={data => {\r\n                  if (window.confirm(texts.forms.createAccount.remConf)) {\r\n                    props.setFieldValue('medList', data.map(obj => obj.value))\r\n                  }\r\n                }}\r\n                onClick={({ target }) => {\r\n                  props.setFieldValue('medSelect', target.value)}\r\n                }\r\n              />          \r\n            </div>              \r\n            <Button className='button' text={texts.forms.createAccount.submit} type='submit' disabled={!showNextPage && true} />\r\n            {errorMessage && <div name='credentials' component='div' className='formik_error'>{errorMessage}</div>}\r\n          </div>\r\n        </Form>\r\n      }      \r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default CreateAccountForm\r\n\r\n/* Entinen medlist\r\n\r\n<div>\r\n              <label htmlFor='medList'>MEDICINE LIST:</label>\r\n              <Field\r\n                placeholder='Medicine name'\r\n                onKeyPress={e => {\r\n                  if (e.which === 13) {\r\n                    e.preventDefault()\r\n                    addMedicine(props)\r\n                  }\r\n                }}\r\n                name='medInput'\r\n              />\r\n              <Button\r\n                style={{ marginLeft: '1em' }}\r\n                className='util-btn'\r\n                type='button'\r\n                text='ADD'\r\n                disabled={props.values.medInput === '' ? true : false}\r\n                onClick={() => addMedicine(props)}\r\n              />\r\n              <Field\r\n                className='formField'\r\n                as='select'\r\n                size='5'\r\n                name='medSelect'\r\n                onClick={({ target }) => {\r\n                  props.setFieldValue('medSelect', target.value)}\r\n                }\r\n              >\r\n                {props.values.medList.map((m, i) => <option key={i}>{m}</option>)}\r\n              </Field>\r\n              <Button\r\n                className='util-btn'\r\n                type='button'\r\n                text='REMOVE'\r\n                disabled={props.values.medSelect === undefined ? true : false}\r\n                onClick={() => {\r\n                  props.setFieldValue('medList', props.values.medList.filter(m => {\r\n                    return m !== props.values.medSelect\r\n                  }))\r\n                  props.setFieldValue('medSelect', undefined)\r\n                  console.log(props.values.medSelect)\r\n                }}\r\n              />\r\n            </div>\r\n            */","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useLanguage } from '../../hooks/useLanguage'\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\r\nimport { login } from '../../reducers/loginReducer'\r\nimport loginService from '../../services/loginService'\r\nimport Button from '../Button'\r\n\r\nconst LoginForm = ({ closeModal }) => {\r\n  // State for showing error message for wrong credentials\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const dispatch = useDispatch()\r\n  const texts = useLanguage()\r\n  \r\n  const initialValues = {\r\n    username: '',\r\n    password: ''\r\n  }\r\n\r\n  const onSubmit = async credentials => {\r\n    try {\r\n      const user = await loginService.login(credentials)\r\n      dispatch(login(user))\r\n      setErrorMessage(null)\r\n      closeModal()\r\n    } catch (exception) {\r\n      console.log('virhe', exception)\r\n      setErrorMessage(texts.forms.login.err)\r\n    }\r\n  }\r\n\r\n  const validate = values => {\r\n    const errors = {}\r\n    \r\n    for (let value in values) {\r\n      if (!values[value]) errors[value] = texts.forms.err.empty\r\n    }\r\n\r\n    return errors\r\n  }\r\n  \r\n  // To apply styles, component prop for ErrorMessage is needed.\r\n  return (\r\n    <Formik initialValues={initialValues} onSubmit={onSubmit} validate={validate}>\r\n      <Form className='form'>\r\n        <div>\r\n          <label htmlFor='username'>{texts.forms.login.user}</label>\r\n          <Field className='formField' type='text' id='username' name='username' autoFocus/>\r\n          <ErrorMessage name='username' component='div' className='formik_error'/>\r\n        </div>\r\n        <div>\r\n          <label htmlFor='password'>{texts.forms.login.pwd}</label>\r\n          <Field className='formField' type='password' id='password' name='password' />\r\n          <ErrorMessage name='password' component='div' className='formik_error'/>\r\n        </div>\r\n        {errorMessage && <div name='credentials' component='div' className='formik_error'>{errorMessage}</div>}\r\n        <Button className='button' text={texts.forms.login.log} type='submit' />\r\n      </Form>\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\nimport DatePicker from 'react-datepicker'\r\nimport Select from 'react-select'\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\r\nimport { updateEntry, createEntry } from '../../reducers/dataReducer'\r\nimport { setMonth } from '../../reducers/viewReducer'\r\nimport { useLanguage } from '../../hooks/useLanguage'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { formatDate, formatTime, formMonthObjectKey } from '../../util/helpers'\r\nimport { useDialog } from '../../hooks/useDialog'\r\nimport Button from '../Button'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\n// Heittää virheilmoituksen ladatua päivityslomakkeen muutoksen jälkeen. Formikin areaan jää aiempi arvo valueksi, ja samalla asetetaan defaultValue propseista.\r\nconst NewRecordForm = ({ closeModal, initialValues }) => {\r\n  const { showDialog } = useDialog()\r\n  const userMeds = useSelector(state => state.login.medList)\r\n  const dispatch = useDispatch()\r\n  const texts = useLanguage()\r\n  const date = new Date()\r\n  \r\n  // If initialValues === null (meaning this isn't a case of modifying existing entry), create new object.\r\n  initialValues = !initialValues \r\n    ? {\r\n      date: formatDate(date),\r\n      time: formatTime(date),\r\n      systolic: '',\r\n      diastolic: '',\r\n      pulse: '',\r\n      meds: [],\r\n    }\r\n    : { ...initialValues, time: initialValues.time.substring(0, 5) }\r\n  \r\n  const onSubmit = values => {\r\n    // If the object has field 'id', an existing entry is being modified. Otherwise a new entry is created.\r\n    if ('id' in values) {\r\n      if (values.pulse === 0 || values.pulse === '') values.pulse = '-'\r\n      dispatch(updateEntry(values))\r\n      showDialog(texts.forms.update.updated, 'message')\r\n    } else {\r\n      values.monthObjectKey = formMonthObjectKey(values.date)      \r\n      dispatch(createEntry(values))\r\n      dispatch(setMonth(values.monthObjectKey))\r\n    }\r\n    closeModal()\r\n  }\r\n\r\n  const medOptions = userMeds\r\n    ? userMeds.map(med => { return { value: med, label: med } })\r\n    : []\r\n  \r\n  const validate = values => {\r\n    const errors = {}\r\n    \r\n    // Checking fields for empty values\r\n    for (let value in values) {\r\n      if (value !== 'notes' && value !== 'meds' && value !== 'pulse') {\r\n        if (!values[value]) errors[value] = texts.forms.err.empty\r\n      }\r\n    }\r\n    // Checking pressure value ranges\r\n    if (Number(values['systolic']) < 90 || Number(values['systolic']) > 250) {\r\n      errors['systolic'] = `${texts.forms.err.outOfBounds}(90-250)`\r\n    }\r\n\r\n    if (Number(values['diastolic']) < 40 || Number(values['diastolic']) > 120) {\r\n      errors['diastolic'] = `${texts.forms.err.outOfBounds}(40-120)`\r\n    }\r\n    return errors\r\n  }\r\n\r\n  // Using initialValues.time to determine how to render the form. If the prop it exists, DatePicker is disabled and a field \r\n  // for changing the time is shown instead.\r\n  return (\r\n    <Formik initialValues={initialValues} onSubmit={onSubmit} validate={validate}>\r\n      {({ values, setFieldValue }) => (\r\n        <Form className='form'>\r\n          <div>\r\n            <label htmlFor='date'>{texts.forms.newRecord.date}</label>\r\n            <DatePicker\r\n              className='formField'\r\n              id='date'\r\n              name='date'\r\n              dateFormat='dd/MM/yy'\r\n              selected={new Date(values.date)}\r\n              onChange={date => setFieldValue('date', formatDate(date))}\r\n              disabled={initialValues.id}\r\n            />\r\n          </div>          \r\n          <div>\r\n            <label htmlFor='date'>{texts.forms.newRecord.time}</label>\r\n            <Field className='formField' type='time' id='time' name='time'/>\r\n          </div>          \r\n          <div>\r\n            <label htmlFor='systolic'>{texts.forms.newRecord.sys}</label>\r\n            <Field className='formField' type='number' min='90' max='250' id='systolic' name='systolic' autoFocus/>\r\n            <ErrorMessage name='systolic' component='div' className='formik_error'/>\r\n          </div>\r\n          <div>\r\n            <label htmlFor='diastolic'>{texts.forms.newRecord.dia}</label>\r\n            <Field className='formField' type='number' min='40' max='120' id='diastolic' name='diastolic' />\r\n            <ErrorMessage name='diastolic' component='div' className='formik_error'/>\r\n          </div>\r\n          <div>\r\n            <label htmlFor='pulse'>{texts.forms.newRecord.pul}</label>\r\n            <Field className='formField' type='number' id='pulse' name='pulse' />\r\n            <ErrorMessage name='pulse' component='div' className='formik_error'/>\r\n          </div>\r\n          <label htmlFor='meds'>{texts.forms.newRecord.meds}</label>     \r\n          <Field \r\n            className='formField'\r\n            placeholder={texts.forms.select.placeHolder}\r\n            component={Select}\r\n            id='meds'\r\n            isMulti\r\n            isSearchable={false}\r\n            options={medOptions}\r\n            name='meds'\r\n            defaultValue={initialValues.meds.map(m => {\r\n              /* Setting meds in initialValues as defaultValues, and forming label from values by converting \r\n                the first letter into upper case. */\r\n              return { value: m, label: m[0].toUpperCase().concat(m.substring(1)) }\r\n            })}\r\n            onChange={(data) => {\r\n              /* onChange gets an array of objects (for every selection): { value: 'text', label: 'Text }.\r\n                Iterating through the objects and mapping their values to Formik's values object, which is defined \r\n                as an array (initialValues.meds). */\r\n              values.meds = data.map(obj => obj.value)\r\n            }}\r\n          />\r\n          <div>\r\n            <label htmlFor='notes'>{texts.forms.newRecord.notes}</label>\r\n            <Field \r\n              className='formField'\r\n              as='textarea'\r\n              id='notes'\r\n              name='notes'\r\n            />\r\n          </div>\r\n          <Button className='button' text={texts.forms.newRecord.submit} type='submit' />\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default NewRecordForm","import React from 'react'\r\n// A variable to save resolve()-function created by Promise\r\nlet resolveCallback\r\nexport const useDialog = () => {\r\n  // Opening the dialog by adding class 'visible', and setting text in the p-element inside the dialog.\r\n  const open = (elem, text) => {    \r\n    elem.classList.add('visible')\r\n    elem.childNodes[0].innerText = text\r\n  }\r\n\r\n  const close = (elem) => {\r\n    elem.classList.remove('visible')\r\n  }\r\n\r\n  // A Promise is created, and the pending resolve object is saved to variable resolveCallback.\r\n  const confirm = async (elem, text, type) => {\r\n    open(elem, text, type)\r\n    return new Promise((resolve) => {\r\n      resolveCallback = resolve\r\n    })\r\n  }\r\n  // Determining the border color of message dialog: error = red, otherwise green.\r\n  // setTimeout() calls the close()-function, which closes the dialog after given time.\r\n  const message = (elem, text, type, error) => {\r\n    elem.style.borderColor = error ? '#f84f31' : '#3f7e51'\r\n    open(elem, text, error)\r\n    setTimeout(() => {\r\n      close(elem)\r\n    }, 3000)\r\n  }\r\n  \r\n  // Functions to set on buttons of confimation dialog.\r\n  const onConfirm = () => {\r\n    resolveCallback(true)\r\n  }\r\n  const onCancel = () => {\r\n    resolveCallback(false)\r\n  }\r\n\r\n  const showDialog = async (text, type, error = null) => {\r\n    const elem = document.getElementById(type)\r\n    if (type === 'confirm') {\r\n      const confirmed = await confirm(elem, text, type)\r\n      close(elem)\r\n      return confirmed\r\n    }\r\n    message(elem, text, type, error)\r\n  }\r\n  return { showDialog, onConfirm, onCancel }\r\n}\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async (credentials) => {\r\n  const user = await axios.post(baseUrl, credentials)\r\n  return user.data\r\n}\r\n\r\nconst checkToken = async (token) => {\r\n  const response = await axios.post(`${baseUrl}/checkToken`, { token })\r\n  return response.data\r\n}\r\n\r\nexport default { login, checkToken }"],"names":["text","type","onClick","className","style","disabled","user","loading","setLoading","useState","initialValues","setInitialValues","showDialog","useDialog","navigate","useNavigate","dispatch","useDispatch","texts","useLanguage","useEffect","userService","id","then","height","weight","medInput","catch","err","response","data","error","optionsBirthYear","options","push","label","forms","settings","birthSelect","i","Date","getFullYear","value","addMedicine","props","medName","values","substring","toUpperCase","concat","setFieldValue","medList","Loader","onSubmit","async","updatedUser","updateLoggedUser","notification","exception","console","log","htmlFor","first","name","component","last","birth","as","placeholder","medListPlaceholder","onKeyPress","e","which","preventDefault","Button","marginLeft","add","select","placeHolder","Select","isMulti","map","med","onChange","window","confirm","remConf","obj","target","submit","cancel","useSelector","state","login","UserSettingsForm","closeModal","errorMessage","setErrorMessage","showNextPage","setShowNextPage","createAccount","display","second","firstName","lastName","birthYear","username","password","passwordConf","loginService","nameTaken","validate","errors","notValidated","includes","empty","length","pwdShort","pwdConf","autoFocus","pwd","padding","justifyContent","validateForm","Object","keys","touched","setTouched","icon","faArrowRight","faArrowLeft","instr","credentials","userMeds","date","time","formatDate","formatTime","systolic","diastolic","pulse","meds","medOptions","updateEntry","update","updated","monthObjectKey","formMonthObjectKey","createEntry","setMonth","Number","outOfBounds","newRecord","dateFormat","selected","sys","min","max","dia","pul","isSearchable","defaultValue","m","notes","resolveCallback","open","elem","classList","childNodes","innerText","close","remove","Promise","resolve","message","borderColor","setTimeout","document","getElementById","confirmed","onConfirm","onCancel","baseUrl","axios","checkToken","token"],"sourceRoot":""}