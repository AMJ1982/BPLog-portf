{"version":3,"file":"static/js/340.c3bed351.chunk.js","mappings":"8MAQA,MAkDA,EAlDc,IAAyB,IAAxB,QAAEA,EAAF,MAAWC,GAAY,EACpC,MAAOC,EAAWC,IAAcC,EAAAA,EAAAA,YAAWC,EAAAA,IACrC,WAAEC,IAAeC,EAAAA,EAAAA,KACjBC,GAAOC,EAAAA,EAAAA,KAAYC,GAASA,EAAMF,OAClCG,GAAWC,EAAAA,EAAAA,MAcjB,OACE,gBAAKC,UAAU,2BAAf,UACE,iBAAKA,UAAU,2BAAf,WACE,iBAAKA,UAAU,qBAAf,WACE,gBAAKA,UAAU,gBAAf,UACE,gBAAKA,UAAU,aAAf,SAA6Bb,EAAQc,KAAKC,UAAU,EAAG,QAEzD,iBAAKF,UAAU,gBAAf,WACE,iBAAKA,UAAU,cAAf,UAA8Bb,EAAQgB,SAAtC,gBACA,iBAAKH,UAAU,cAAf,UAA8Bb,EAAQiB,UAAtC,gBACA,gBAAKJ,UAAU,cAAf,SAA8Bb,EAAQkB,YAExC,iBAAKL,UAAU,yBAAf,WACE,gBAAKA,UAAU,WAAW,iBAAe,eAAeM,QAAUC,GAAUlB,EAAUkB,EAAOpB,GAA7F,UACE,SAAC,IAAD,CAAiBa,UAAU,OAAOQ,KAAMC,EAAAA,SAE1C,gBAAKT,UAAU,WAAWM,QAAUC,GA5BzBG,WACnBH,EAAMI,kBAINtB,EAAUkB,SACAd,EAAWL,EAAMwB,KAAKC,SAASC,MAAMC,QAAS,YACtDjB,GAASkB,EAAAA,EAAAA,IAAY7B,EAASQ,IAEhCL,GAAY,EAmB0C2B,CAAaV,GAA3D,UACE,SAAC,IAAD,CAAiBP,UAAU,OAAOQ,KAAMU,EAAAA,cAI7C/B,EAAQgC,KAAKC,OAAS,IACrB,iBAAKpB,UAAU,2BAAf,UACGZ,EAAMwB,KAAKC,SAASC,MAAMK,KAD7B,IACoChC,EAAQgC,KAAKE,KAAIC,GAAKA,EAAEpB,UAAU,EAAG,GAAGqB,cAAcC,OAAOF,EAAEpB,UAAU,MAAKuB,KAAK,SAExHtC,EAAQuC,QAAS,iBAAK1B,UAAU,2BAAf,UAA2CZ,EAAMwB,KAAKC,SAASC,MAAMY,MAArE,IAA6EvC,EAAQuC,aAzB7G,C,0CCxBF,IAAIC,EACG,MAAMjC,EAAY,KAEvB,MAAMkC,EAAO,CAACC,EAAMC,KAClBD,EAAKE,UAAUC,IAAI,WACnBH,EAAKI,WAAW,GAAGC,UAAYJ,CAA/B,EAGIK,EAASN,IACbA,EAAKE,UAAUK,OAAO,UAAtB,EAIIrB,EAAUL,MAAOmB,EAAMC,EAAMO,KACjCT,EAAKC,EAAMC,GACJ,IAAIQ,SAASC,IAClBZ,EAAkBY,CAAlB,KAKEC,EAAU,CAACX,EAAMC,EAAMO,EAAMI,KACjCZ,EAAKa,MAAMC,YAAcF,EAAQ,UAAY,UAC7Cb,EAAKC,EAAMC,GACXc,YAAW,KACTT,EAAMN,EAAN,GACC,IAFH,EAsBF,MAAO,CAAEpC,WATUiB,eAAOoB,EAAMO,GAAwB,IAAlBI,EAAiB,uDAAT,KAC5C,MAAMZ,EAAOgB,SAASC,eAAeT,GACrC,GAAa,YAATA,EAAoB,CACtB,MAAMU,QAAkBhC,EAAQc,EAAMC,GAEtC,OADAK,EAAMN,GACCkB,CACR,CACDP,EAAQX,EAAMC,EAAMO,EAAMI,EAC3B,EACoBO,UAhBH,KAChBrB,GAAgB,EAAhB,EAe8BsB,SAbf,KACftB,GAAgB,EAAhB,EAYF,C","sources":["components/Entry.js","hooks/useDialog.js"],"sourcesContent":["import React, { useContext } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ModalContext } from '../App'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { deleteEntry } from '../reducers/dataReducer'\r\nimport { faTrashCan, faPencil } from '@fortawesome/free-solid-svg-icons'\r\nimport { useDialog } from '../hooks/useDialog'\r\n\r\nconst Entry = ({ content, texts }) => {\r\n  const [openModal, closeModal] = useContext(ModalContext)\r\n  const { showDialog } = useDialog()\r\n  const data = useSelector(state => state.data)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleDelete = async (event) => {\r\n    event.stopPropagation()\r\n    // Confirmation of deletion invokes handleFormTypeChange in App component, which sets formType as 'confirm'. \r\n    // Since 'confirm' doesn't match to any form type in switch statement in useModal, null is returned, and an \r\n    // empty modal opens. At the same time Confirm is set visible in useDialog.\r\n    openModal(event)\r\n    if (await showDialog(texts.view.listItem.entry.confirm, 'confirm')) {\r\n      dispatch(deleteEntry(content, data))\r\n    }\r\n    closeModal()\r\n  }\r\n\r\n  return (\r\n    <div className='item-field-bp-cont entry'>\r\n      <div className='item-field-bp-cont-inner'>\r\n        <div className='item-field-bp-cont'>\r\n          <div className='item-field-bp'>\r\n            <div className='guide-text'>{content.time.substring(0, 5)}</div>\r\n          </div>\r\n          <div className='item-field-bp'>\r\n            <div className='item-bp sys'>{content.systolic}&nbsp;/&nbsp;</div>\r\n            <div className='item-bp dia'>{content.diastolic}&nbsp;/&nbsp;</div>          \r\n            <div className='item-bp pul'>{content.pulse}</div>\r\n          </div>\r\n          <div className='tool-bar item-field-bp'>\r\n            <div className='icon-div' data-form-type='modifyRecord' onClick={(event) => openModal(event, content)}>\r\n              <FontAwesomeIcon className='icon' icon={faPencil} />\r\n            </div>\r\n            <div className='icon-div' onClick={(event) => handleDelete(event)}>\r\n              <FontAwesomeIcon className='icon' icon={faTrashCan} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {content.meds.length > 0 && \r\n          <div className='guide-text item-field-bp'>\r\n            {texts.view.listItem.entry.meds} {content.meds.map(m => m.substring(0, 1).toUpperCase().concat(m.substring(1))).join(', ')}\r\n          </div>}\r\n        {content.notes && <div className='guide-text item-field-bp'>{texts.view.listItem.entry.notes} {content.notes}</div>}\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Entry","import React from 'react'\r\n// A variable to save resolve()-function created by Promise\r\nlet resolveCallback\r\nexport const useDialog = () => {\r\n  // Opening the dialog by adding class 'visible', and setting text in the p-element inside the dialog.\r\n  const open = (elem, text) => {    \r\n    elem.classList.add('visible')\r\n    elem.childNodes[0].innerText = text\r\n  }\r\n\r\n  const close = (elem) => {\r\n    elem.classList.remove('visible')\r\n  }\r\n\r\n  // A Promise is created, and the pending resolve object is saved to variable resolveCallback.\r\n  const confirm = async (elem, text, type) => {\r\n    open(elem, text, type)\r\n    return new Promise((resolve) => {\r\n      resolveCallback = resolve\r\n    })\r\n  }\r\n  // Determining the border color of message dialog: error = red, otherwise green.\r\n  // setTimeout() calls the close()-function, which closes the dialog after given time.\r\n  const message = (elem, text, type, error) => {\r\n    elem.style.borderColor = error ? '#f84f31' : '#3f7e51'\r\n    open(elem, text, error)\r\n    setTimeout(() => {\r\n      close(elem)\r\n    }, 3000)\r\n  }\r\n  \r\n  // Functions to set on buttons of confimation dialog.\r\n  const onConfirm = () => {\r\n    resolveCallback(true)\r\n  }\r\n  const onCancel = () => {\r\n    resolveCallback(false)\r\n  }\r\n\r\n  const showDialog = async (text, type, error = null) => {\r\n    const elem = document.getElementById(type)\r\n    if (type === 'confirm') {\r\n      const confirmed = await confirm(elem, text, type)\r\n      close(elem)\r\n      return confirmed\r\n    }\r\n    message(elem, text, type, error)\r\n  }\r\n  return { showDialog, onConfirm, onCancel }\r\n}\r\n"],"names":["content","texts","openModal","closeModal","useContext","ModalContext","showDialog","useDialog","data","useSelector","state","dispatch","useDispatch","className","time","substring","systolic","diastolic","pulse","onClick","event","icon","faPencil","async","stopPropagation","view","listItem","entry","confirm","deleteEntry","handleDelete","faTrashCan","meds","length","map","m","toUpperCase","concat","join","notes","resolveCallback","open","elem","text","classList","add","childNodes","innerText","close","remove","type","Promise","resolve","message","error","style","borderColor","setTimeout","document","getElementById","confirmed","onConfirm","onCancel"],"sourceRoot":""}