{"version":3,"file":"static/js/904.77de12f2.chunk.js","mappings":"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","sources":["components/Button.js","components/forms/NewRecordForm.js","hooks/useDialog.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Button = ({ text, type, onClick, className, style, disabled }) => {\r\n  return (\r\n    <button\r\n      type={type}\r\n      className={className}\r\n      onClick={onClick}\r\n      style={style}\r\n      disabled={disabled}\r\n    >{text}</button>\r\n  )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport DatePicker from 'react-datepicker'\r\nimport Select from 'react-select'\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\r\nimport { updateEntry, createEntry } from '../../reducers/dataReducer'\r\nimport { setMonth } from '../../reducers/viewReducer'\r\nimport { useLanguage } from '../../hooks/useLanguage'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { formatDate, formatTime, formMonthObjectKey } from '../../util/helpers'\r\nimport { useDialog } from '../../hooks/useDialog'\r\nimport Button from '../Button'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\n// Heittää virheilmoituksen ladatua päivityslomakkeen muutoksen jälkeen. Formikin areaan jää aiempi arvo valueksi, ja samalla asetetaan defaultValue propseista.\r\nconst NewRecordForm = ({ closeModal, initialValues }) => {\r\n  const { showDialog } = useDialog()\r\n  const userMeds = useSelector(state => state.login.medList)\r\n  const dispatch = useDispatch()\r\n  const texts = useLanguage()\r\n  const date = new Date()\r\n  \r\n  // If initialValues === null (meaning this isn't a case of modifying existing entry), create new object.\r\n  initialValues = !initialValues \r\n    ? {\r\n      date: formatDate(date),\r\n      time: formatTime(date),\r\n      systolic: '',\r\n      diastolic: '',\r\n      pulse: '',\r\n      meds: [],\r\n    }\r\n    : { ...initialValues, time: initialValues.time.substring(0, 5) }\r\n  \r\n  const onSubmit = values => {\r\n    // If the object has field 'id', an existing entry is being modified. Otherwise a new entry is created.\r\n    if ('id' in values) {\r\n      if (values.pulse === 0 || values.pulse === '') values.pulse = '-'\r\n      dispatch(updateEntry(values))\r\n      showDialog(texts.forms.update.updated, 'message')\r\n    } else {\r\n      values.monthObjectKey = formMonthObjectKey(values.date)      \r\n      dispatch(createEntry(values))\r\n      dispatch(setMonth(values.monthObjectKey))\r\n    }\r\n    closeModal()\r\n  }\r\n\r\n  const medOptions = userMeds\r\n    ? userMeds.map(med => { return { value: med, label: med } })\r\n    : []\r\n  \r\n  const validate = values => {\r\n    const errors = {}\r\n    \r\n    // Checking fields for empty values\r\n    for (let value in values) {\r\n      if (value !== 'notes' && value !== 'meds' && value !== 'pulse') {\r\n        if (!values[value]) errors[value] = texts.forms.err.empty\r\n      }\r\n    }\r\n    // Checking pressure value ranges\r\n    if (Number(values['systolic']) < 90 || Number(values['systolic']) > 250) {\r\n      errors['systolic'] = `${texts.forms.err.outOfBounds}(90-250)`\r\n    }\r\n\r\n    if (Number(values['diastolic']) < 40 || Number(values['diastolic']) > 120) {\r\n      errors['diastolic'] = `${texts.forms.err.outOfBounds}(40-120)`\r\n    }\r\n    return errors\r\n  }\r\n\r\n  // Using initialValues.time to determine how to render the form. If the prop it exists, DatePicker is disabled and a field \r\n  // for changing the time is shown instead.\r\n  return (\r\n    <Formik initialValues={initialValues} onSubmit={onSubmit} validate={validate}>\r\n      {({ values, setFieldValue }) => (\r\n        <Form className='form'>\r\n          <div>\r\n            <label htmlFor='date'>{texts.forms.newRecord.date}</label>\r\n            <DatePicker\r\n              className='formField'\r\n              id='date'\r\n              name='date'\r\n              dateFormat='dd/MM/yy'\r\n              selected={new Date(values.date)}\r\n              onChange={date => setFieldValue('date', formatDate(date))}\r\n              disabled={initialValues.id}\r\n            />\r\n          </div>          \r\n          <div>\r\n            <label htmlFor='date'>{texts.forms.newRecord.time}</label>\r\n            <Field className='formField' type='time' id='time' name='time'/>\r\n          </div>          \r\n          <div>\r\n            <label htmlFor='systolic'>{texts.forms.newRecord.sys}</label>\r\n            <Field className='formField' type='number' min='90' max='250' id='systolic' name='systolic' autoFocus/>\r\n            <ErrorMessage name='systolic' component='div' className='formik_error'/>\r\n          </div>\r\n          <div>\r\n            <label htmlFor='diastolic'>{texts.forms.newRecord.dia}</label>\r\n            <Field className='formField' type='number' min='40' max='120' id='diastolic' name='diastolic' />\r\n            <ErrorMessage name='diastolic' component='div' className='formik_error'/>\r\n          </div>\r\n          <div>\r\n            <label htmlFor='pulse'>{texts.forms.newRecord.pul}</label>\r\n            <Field className='formField' type='number' id='pulse' name='pulse' />\r\n            <ErrorMessage name='pulse' component='div' className='formik_error'/>\r\n          </div>\r\n          <label htmlFor='meds'>{texts.forms.newRecord.meds}</label>     \r\n          <Field \r\n            className='formField'\r\n            placeholder={texts.forms.select.placeHolder}\r\n            component={Select}\r\n            id='meds'\r\n            isMulti\r\n            isSearchable={false}\r\n            options={medOptions}\r\n            name='meds'\r\n            defaultValue={initialValues.meds.map(m => {\r\n              /* Setting meds in initialValues as defaultValues, and forming label from values by converting \r\n                the first letter into upper case. */\r\n              return { value: m, label: m[0].toUpperCase().concat(m.substring(1)) }\r\n            })}\r\n            onChange={(data) => {\r\n              /* onChange gets an array of objects (for every selection): { value: 'text', label: 'Text }.\r\n                Iterating through the objects and mapping their values to Formik's values object, which is defined \r\n                as an array (initialValues.meds). */\r\n              values.meds = data.map(obj => obj.value)\r\n            }}\r\n          />\r\n          <div>\r\n            <label htmlFor='notes'>{texts.forms.newRecord.notes}</label>\r\n            <Field \r\n              className='formField'\r\n              as='textarea'\r\n              id='notes'\r\n              name='notes'\r\n            />\r\n          </div>\r\n          <Button className='button' text={texts.forms.newRecord.submit} type='submit' />\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default NewRecordForm","import React from 'react'\r\n// A variable to save resolve()-function created by Promise\r\nlet resolveCallback\r\nexport const useDialog = () => {\r\n  // Opening the dialog by adding class 'visible', and setting text in the p-element inside the dialog.\r\n  const open = (elem, text) => {    \r\n    elem.classList.add('visible')\r\n    elem.childNodes[0].innerText = text\r\n  }\r\n\r\n  const close = (elem) => {\r\n    elem.classList.remove('visible')\r\n  }\r\n\r\n  // A Promise is created, and the pending resolve object is saved to variable resolveCallback.\r\n  const confirm = async (elem, text, type) => {\r\n    open(elem, text, type)\r\n    return new Promise((resolve) => {\r\n      resolveCallback = resolve\r\n    })\r\n  }\r\n  // Determining the border color of message dialog: error = red, otherwise green.\r\n  // setTimeout() calls the close()-function, which closes the dialog after given time.\r\n  const message = (elem, text, type, error) => {\r\n    elem.style.borderColor = error ? '#f84f31' : '#3f7e51'\r\n    open(elem, text, error)\r\n    setTimeout(() => {\r\n      close(elem)\r\n    }, 3000)\r\n  }\r\n  \r\n  // Functions to set on buttons of confimation dialog.\r\n  const onConfirm = () => {\r\n    resolveCallback(true)\r\n  }\r\n  const onCancel = () => {\r\n    resolveCallback(false)\r\n  }\r\n\r\n  const showDialog = async (text, type, error = null) => {\r\n    const elem = document.getElementById(type)\r\n    if (type === 'confirm') {\r\n      const confirmed = await confirm(elem, text, type)\r\n      close(elem)\r\n      return confirmed\r\n    }\r\n    message(elem, text, type, error)\r\n  }\r\n  return { showDialog, onConfirm, onCancel }\r\n}\r\n"],"names":["text","type","onClick","className","style","disabled","closeModal","initialValues","showDialog","useDialog","userMeds","useSelector","state","login","medList","dispatch","useDispatch","texts","useLanguage","date","Date","time","substring","formatDate","formatTime","systolic","diastolic","pulse","meds","medOptions","map","med","value","label","onSubmit","values","updateEntry","forms","update","updated","monthObjectKey","formMonthObjectKey","createEntry","setMonth","validate","errors","err","empty","Number","outOfBounds","setFieldValue","htmlFor","newRecord","id","name","dateFormat","selected","onChange","sys","min","max","autoFocus","component","dia","pul","placeholder","select","placeHolder","Select","isMulti","isSearchable","options","defaultValue","m","toUpperCase","concat","data","obj","notes","as","submit","resolveCallback","open","elem","classList","add","childNodes","innerText","close","remove","confirm","async","Promise","resolve","message","error","borderColor","setTimeout","document","getElementById","confirmed","onConfirm","onCancel"],"sourceRoot":""}