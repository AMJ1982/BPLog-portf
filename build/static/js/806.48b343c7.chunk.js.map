{"version":3,"file":"static/js/806.48b343c7.chunk.js","mappings":"uKAEAA,EAAAA,GAAAA,YAAkBC,EAAAA,I,aCGlB,MAAMD,EAAQE,EAAAA,YAAiB,CAACC,EAAOC,KACrC,MAAMC,EAAUF,EAAMG,MAAMC,UACtBC,GAAWC,EAAAA,EAAAA,QAAO,MAElBC,EAAU,IACPF,EAASG,QAAQC,gBAO1B,IAJAC,EAAAA,EAAAA,qBAAoBT,GAAK,KAChB,CAAEM,eAGNL,EAAS,OAEd,MAAMS,EAAO,CAEXC,OAAQV,EAAQW,KAAIC,GAAQA,EAAK,GAAGC,MAAM,KAAK,KAC/CC,SAAU,CAER,CACEC,MAAO,WACPN,KAAMT,EAAQW,KAAKK,IAAQC,EAAAA,EAAAA,IAAiBD,EAAI,GAAGE,SAAU,cAC7DC,YAAa,oBACbC,gBAAiB,2BAEnB,CACEL,MAAO,YACPN,KAAMT,EAAQW,KAAKK,IAAQC,EAAAA,EAAAA,IAAiBD,EAAI,GAAGE,SAAU,eAC7DC,YAAa,oBACbC,gBAAiB,6BA8DvB,OACE,+BACE,SAAC,KAAD,CACErB,IAAKI,EACLkB,UAAU,QACVZ,KAAMA,EACNa,QA/DU,CACdC,YAAa,CACXC,WAAW,GAEbC,YAAY,EACZC,QAAS,CACPC,QAAQ,EACRC,MAAO,CACLC,SAAS,EAETC,KAAM,IAOG,KAETC,MAAO,QACPC,MAAO,OACPC,KAAM,CACJC,KAAM,MAIZC,OAAQ,CACNC,EAAG,CACDC,KAAM,CACJL,MAAQM,IAAS,IAAD,IACd,OAAwB,OAApB,UAAAA,EAAIC,YAAJ,eAAUC,OACL,0BAEe,MAApB,UAAAF,EAAIC,YAAJ,eAAUC,OACL,0BAEF,0BAAP,EAEFC,UAAYH,IAAS,IAAD,EAClB,MAAMI,EAAS,UAAGJ,EAAIC,YAAP,aAAG,EAAUC,MAE5B,OAAkB,MAAdE,GAAmC,KAAdA,EAChB,EAEF,CAAP,IAINC,EAAG,CACDN,KAAM,CACJL,MAAO,2BACPY,QAAQ,SAMhB,IAYFjD,EAAMkD,YAAc,QAEpB,S","sources":["../node_modules/chart.js/auto/auto.mjs","components/Chart.js"],"sourcesContent":["import {Chart, registerables} from '../dist/chart.mjs';\n\nChart.register(...registerables);\n\nexport default Chart;\n","import React, { useRef, useImperativeHandle } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport { calculateAverage } from '../util/helpers'\r\nimport { Chart as ChartJS } from 'chart.js/auto'\r\n\r\nconst Chart = React.forwardRef((props, ref) => {\r\n  const daysArr = props.month.reverse()\r\n  const chartRef = useRef(null)\r\n\r\n  const toImage = () => {\r\n    return chartRef.current.toBase64Image()\r\n  }\r\n\r\n  useImperativeHandle(ref, () =>{\r\n    return { toImage }\r\n  })\r\n\r\n  if (!daysArr) return\r\n\r\n  const data = {\r\n    // Numbers of days for X-axis\r\n    labels: daysArr.map(date => date[0].split('/')[1]),\r\n    datasets: [\r\n      // Empty ticks should be defined as NaN\r\n      {\r\n        label: 'Systolic',        \r\n        data: daysArr.map((day) => calculateAverage(day[1].readings, 'systolic')),\r\n        borderColor: 'rgb(255, 99, 132)',\r\n        backgroundColor: 'rgba(255, 99, 132, 0.5)'\r\n      },\r\n      {\r\n        label: 'Diastolic',\r\n        data: daysArr.map((day) => calculateAverage(day[1].readings, 'diastolic')),\r\n        borderColor: 'rgb(53, 162, 235)',\r\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n      },\r\n    ]\r\n  }\r\n\r\n  const options = { \r\n    interaction: {\r\n      intersect: false\r\n    },\r\n    responsive: true,\r\n    plugins: {\r\n      legend: false,\r\n      title: {\r\n        display: false,\r\n        // Converting number of month to month name. 'long' needed as on option\r\n        text: () => {          \r\n          /*\r\n          const monthNumber = Number(daysArr.month.substring(4))//Number(month[1][0].date.split('/')[0])\r\n          const date = new Date()\r\n          date.setMonth(monthNumber - 1)\r\n          return date.toLocaleString('en-US', { month: 'long' })\r\n          */\r\n          return null\r\n        },\r\n        align: 'start',\r\n        color: '#FFF',\r\n        font: {\r\n          size: 20\r\n        },        \r\n      },      \r\n    },\r\n    scales: {\r\n      y: {\r\n        grid: {\r\n          color: (ctx) => {\r\n            if (ctx.tick?.value === 130) {\r\n              return 'rgba(255, 99, 132, 0.3)'\r\n            }\r\n            if (ctx.tick?.value === 80) {\r\n              return 'rgba(53, 162, 235, 0.3)'\r\n            }\r\n            return 'rgba(100, 100, 100, 0.7)'\r\n          },\r\n          lineWidth: (ctx) => {\r\n            const tickValue = ctx.tick?.value\r\n\r\n            if (tickValue === 130 || tickValue === 80) {\r\n              return 5\r\n            }\r\n            return 1\r\n          }\r\n        }\r\n      },\r\n      x: {\r\n        grid: {\r\n          color: 'rgba(100, 100, 100, 0.7)',\r\n          offset: true\r\n        }\r\n      }\r\n    }    \r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <Line\r\n        ref={chartRef}\r\n        className='chart'\r\n        data={data}\r\n        options={options}\r\n      />\r\n    </>\r\n  )     \r\n})\r\n\r\nChart.displayName = 'Chart'\r\n\r\nexport default Chart"],"names":["Chart","registerables","React","props","ref","daysArr","month","reverse","chartRef","useRef","toImage","current","toBase64Image","useImperativeHandle","data","labels","map","date","split","datasets","label","day","calculateAverage","readings","borderColor","backgroundColor","className","options","interaction","intersect","responsive","plugins","legend","title","display","text","align","color","font","size","scales","y","grid","ctx","tick","value","lineWidth","tickValue","x","offset","displayName"],"sourceRoot":""}