{"version":3,"file":"static/js/436.c118f310.chunk.js","mappings":"wKAIA,MAgHA,EAhHe,IAAsE,IAArE,SAAEA,EAAF,KAAYC,EAAZ,eAAkBC,EAAlB,SAAkCC,EAAW,KAA7C,IAAmDC,EAAnD,MAAwDC,GAAY,EAElF,MAAMC,EAASC,EAAAA,WAAAA,OAAkB,CAC/BC,KAAM,CACJC,WAAY,GACZC,cAAe,GACfC,kBAAmB,IAErBC,MAAO,CACLC,SAAU,GACVC,aAAc,IAEhBC,KAAM,CACJF,SAAU,GACVG,QAAS,EACTC,WAAY,eAEdC,MAAO,CACLC,QAAS,OACTC,WAAY,EACZC,cAAe,UAEjBC,SAAU,CACRH,QAAS,OACTE,cAAe,OAEjBE,UAAW,CACTC,gBAAiB,QAEnBC,UAAW,CACTC,OAAQ,kBAEVC,aAAc,CACZC,MAAO,UAETC,eAAgB,CACdD,MAAO,QAETE,eAAgB,CACdC,SAAU,GAEZC,KAAM,CACJC,SAAU,WACVC,KAAM,GACNC,MAAO,EACPP,MAAO,OACPQ,OAAQ,UAoDZ,OACE,SAAC,EAAAC,SAAD,WACE,UAAC,EAAAC,KAAD,CAAMC,MAAOjC,EAAOE,KAApB,WACE,UAAC,EAAAgC,KAAD,YACE,UAAC,EAAAC,KAAD,CAAMF,MAAOjC,EAAOM,MAApB,UAA4BX,EAAKyC,KAAjC,MAAyCC,EAAAA,EAAAA,IAAazC,EAAgBE,OACtE,SAAC,EAAAwC,MAAD,CAAOL,MAAOjC,EAAO0B,KAAMa,IAAKC,EAAQ,WAGxC3C,GAXC,SAAC,EAAAyC,MAAD,CAAOC,IAAK1C,IA5CF,MACjB,MAAM4C,EAAgB1C,EAAM2C,KAAKC,IAAIC,SAG/BC,EAAaC,IACjB,MAAMb,EAAQ,CAACjC,EAAOmB,UAAWnB,EAAOS,MACxC,OAAQqC,GACR,KAAK,EAAI,MAAO,IAAIb,EAAOjC,EAAOqB,cAClC,KAAK,EAAG,MAAO,IAAIY,EAAOjC,EAAOwB,gBACjC,QAAS,MAAO,IAAIS,EAAOjC,EAAOuB,gBAHlC,EAOF,OACE,+BACE,UAAC,EAAAW,KAAD,CAAMD,MAAOjC,EAAOY,MAApB,WACE,SAAC,EAAAsB,KAAD,CAAMD,MAAO,CAACjC,EAAOgB,SAAUhB,EAAOiB,WAAtC,SACGwB,EAAcM,KAAI,CAACC,EAASF,KAC3B,SAAC,EAAAX,KAAD,CAEEF,MAAOY,EAAUC,GAFnB,SAGEE,GAFKF,OAKVpD,EAASqD,KAAKE,IACb,MAAOC,GAAQD,EAEf,MADiB,IAAIA,EAAI,GAAGE,UAAUC,KAAKC,EAAAA,IAC3BN,KAAI,CAACO,EAAOR,KAC1B,UAAC,EAAAZ,KAAD,CAA2BD,MAAOjC,EAAOgB,SAAzC,WACE,SAAC,EAAAmB,KAAD,CAAMF,MAAOY,EAAU,GAAvB,SAAkC,IAANC,GAAWI,KACvC,SAAC,EAAAf,KAAD,CAAMF,MAAOY,EAAU,GAAvB,SAA4BS,EAAMC,KAAKC,UAAU,EAAG,MACpD,SAAC,EAAArB,KAAD,CAAMF,MAAOY,EAAU,GAAvB,SAA4BS,EAAMG,YAClC,SAAC,EAAAtB,KAAD,CAAMF,MAAOY,EAAU,GAAvB,SAA4BS,EAAMI,aAClC,SAAC,EAAAvB,KAAD,CAAMF,MAAOY,EAAU,GAAvB,SAA4BS,EAAMK,SAClC,SAAC,EAAAxB,KAAD,CAAMF,MAAO,CAACY,EAAU,GAAI,CAAEtC,SAAU,KAAxC,SAAgD+C,EAAMM,KAAKC,KAAK,UANlE,UAAcX,EAAd,YAAsBJ,KADxB,QAdR,EA0CiBgB,OARnB,C","sources":["components/PDFDoc.js"],"sourcesContent":["import React from 'react'\r\nimport { Page, Document, View, Text, Image, StyleSheet } from '@react-pdf/renderer'\r\nimport { getMonthName, sortByTime } from '../util/helpers'\r\n\r\nconst PDFDoc = ({ contents, user, monthObjectKey, chartImg = null, lan, texts }) => {\r\n\r\n  const styles = StyleSheet.create({\r\n    body: {\r\n      paddingTop: 35,\r\n      paddingBottom: 65,\r\n      paddingHorizontal: 35\r\n    },\r\n    title: {\r\n      fontSize: 18,\r\n      marginBottom: 20\r\n    },\r\n    text: {\r\n      fontSize: 14,\r\n      padding: 2,\r\n      fontFamily: 'Times-Roman',    \r\n    },\r\n    table: {\r\n      display: 'flex',\r\n      flexShrink: 0,\r\n      flexDirection: 'column',\r\n    },\r\n    tableRow: {\r\n      display: 'flex',\r\n      flexDirection: 'row',      \r\n    },\r\n    tableHead: {\r\n      backgroundColor: '#EEE',\r\n    },    \r\n    tableCell: {\r\n      border: '1px solid gray'\r\n    },\r\n    tableCellMed: {\r\n      width: 100 / 8 + 'vw'\r\n    },\r\n    tableCellSmall: {\r\n      width: 100 / 10 + 'vw'\r\n    },\r\n    tableCellLarge: {\r\n      flexGrow: 1\r\n    },\r\n    logo: {\r\n      position: 'absolute',\r\n      top: -10,\r\n      right: 0,\r\n      width: '40px',\r\n      height: '40px',\r\n    }\r\n  })\r\n  \r\n  // Constructing a table of received data.\r\n  const buildTable = () => {\r\n    const tableHeadings = texts.view.pdf.headings\r\n\r\n    // Creating cells for the table. Call style is defined by the index created in .map() methods below.\r\n    const cellStyle = (i) => {\r\n      const style = [styles.tableCell, styles.text]\r\n      switch (i) {\r\n      case 0 : return [...style, styles.tableCellMed]\r\n      case 5: return [...style, styles.tableCellLarge]\r\n      default: return [...style, styles.tableCellSmall]\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>        \r\n        <View style={styles.table}>\r\n          <View style={[styles.tableRow, styles.tableHead]}>\r\n            {tableHeadings.map((heading, i) => \r\n              <Text \r\n                key={i}\r\n                style={cellStyle(i)}\r\n              >{heading}         \r\n              </Text>)}\r\n          </View>\r\n          {contents.map((day) => {\r\n            const [date] = day\r\n            const readings = [...day[1].readings].sort(sortByTime)            \r\n            return readings.map((entry, i) => (\r\n              <View key={`${date}-${i}`} style={styles.tableRow}>\r\n                <Text style={cellStyle(0)}>{i === 0 && date}</Text>\r\n                <Text style={cellStyle(1)}>{entry.time.substring(0, 5)}</Text>\r\n                <Text style={cellStyle(2)}>{entry.systolic}</Text>\r\n                <Text style={cellStyle(3)}>{entry.diastolic}</Text>\r\n                <Text style={cellStyle(4)}>{entry.pulse}</Text>\r\n                <Text style={[cellStyle(5), { fontSize: 10 }]}>{entry.meds.join(', ')}</Text>\r\n              </View>\r\n            ))\r\n          })}\r\n        </View>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const viewChart = () => {\r\n    return <Image src={chartImg}></Image>\r\n  }\r\n  \r\n  return (    \r\n    <Document>\r\n      <Page style={styles.body}>\r\n        <View>\r\n          <Text style={styles.title}>{user.name}, {getMonthName(monthObjectKey, lan)}</Text>\r\n          <Image style={styles.logo} src={require('../img/logo192.png')} /> \r\n        </View>\r\n        \r\n        {!chartImg ? buildTable() : viewChart()}\r\n      </Page>\r\n    </Document>\r\n  )\r\n}\r\n\r\nexport default PDFDoc"],"names":["contents","user","monthObjectKey","chartImg","lan","texts","styles","StyleSheet","body","paddingTop","paddingBottom","paddingHorizontal","title","fontSize","marginBottom","text","padding","fontFamily","table","display","flexShrink","flexDirection","tableRow","tableHead","backgroundColor","tableCell","border","tableCellMed","width","tableCellSmall","tableCellLarge","flexGrow","logo","position","top","right","height","Document","Page","style","View","Text","name","getMonthName","Image","src","require","tableHeadings","view","pdf","headings","cellStyle","i","map","heading","day","date","readings","sort","sortByTime","entry","time","substring","systolic","diastolic","pulse","meds","join","buildTable"],"sourceRoot":""}